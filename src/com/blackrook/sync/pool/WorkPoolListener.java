/*******************************************************************************
 * Copyright (c) 2009-2014 Black Rook Software
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
 ******************************************************************************/
package com.blackrook.sync.pool;

/**
 * Listener interface for the worker pool.
 * @author Matthew Tropiano
 * @since 2.5.0
 */
public interface WorkPoolListener<R extends Object>
{
	/**
	 * Called when a worker thread is spawned.
	 * @param pool the pool that the thread belongs to.
	 * It is highly recommended that implementors of this function do not
	 * mess with the thread's execution, as it may have adverse effects in the pool.  
	 */
	public void workerCreated(WorkPool<R> pool);

	/**
	 * Called when a worker thread is destroyed.
	 * @param pool the pool that the thread belonged to.
	 */
	public void workerDestroyed(WorkPool<R> pool);

	/**
	 * Called when a task is enqueued.
	 * @param pool the pool that this happened on.
	 * @param runnable the runnable task associated with this event.
	 */
	public void workEnqueued(WorkPool<R> pool, R runnable);

	/**
	 * Called when a task is started.
	 * @param pool the pool that this happened on.
	 * @param runnable the runnable task associated with this event.
	 */
	public void workStarted(WorkPool<R> pool, R runnable);

	/**
	 * Called when a task finishes.
	 * @param pool the pool that this happened on.
	 * @param runnable the runnable task associated with this event.
	 */
	public void workFinished(WorkPool<R> pool, R runnable);

	/**
	 * Called when a task throws an exception that isn't caught.
	 * @param pool the pool that this happened on.
	 * @param runnable the runnable task associated with this event.
	 * @param t the {@link Throwable} generated by the task. 
	 */
	public void workError(WorkPool<R> pool, R runnable, Throwable t);

}
